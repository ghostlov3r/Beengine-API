package beengine.api.event.player;

import beengine.api.event.Cancellable;
import beengine.api.event.Event;
import beengine.api.event.EventListener;
import beengine.event.RegisteredListener;
import beengine.minecraft.LoginSuccessor;
import beengine.minecraft.MinecraftSession;
import lombok.Getter;
import lombok.experimental.Accessors;

import javax.annotation.Nullable;
import java.util.*;

/**
 * Called when a player connects to the server, prior to authentication taking place.
 * Cancelling this event will cause the player to be disconnected with the kick message set.
 *
 * This event should be used to decide if the player may continue to login to the server. Do things like checking
 * bans, whitelisting, server-full etc here.
 *
 * WARNING: Any information about the player CANNOT be trusted at this stage, because they are not authenticated and
 * could be a hacker posing as another player.
 *
 * WARNING: THE PLAYER IS NOT VERIFIED DURING THIS EVENT. At this point, it's unknown if the player is real or a
 * hacker.
 */
@Accessors(fluent = true)
@Getter
public class PlayerPreLoginEvent extends Event implements Cancellable {
	
	MinecraftSession session;
	boolean isAuthRequired;
	/** an array of kick reasons currently assigned.  */
	Map<KickReason, String> kickReasons;
	LoginSuccessor successor;

	public PlayerPreLoginEvent (MinecraftSession session, boolean isAuthRequired) {
		this.session = session;
		this.isAuthRequired = isAuthRequired;
		this.kickReasons = new EnumMap<>(KickReason.class);
		this.successor = new LoginSuccessor(session);
	}
	
	@Override
	public boolean isCancelled() {
		return !isAllowed();
	}
	
	@Override
	public void cancel() {
		throw new RuntimeException("Use setKickReason instead");
	}

	public enum KickReason {
		PLUGIN,  //Plugin reason should always take priority over anything else
		SERVER_FULL,
		SERVER_WHITELISTED,
		BANNED
	}
	
	/**
	 * Returns whether the given kick reason is set for this event.
	 */
	public boolean isKickReasonSet(KickReason reason) {
		return kickReasons.containsKey(reason);
	}

	/**
	 * Sets a reason to disallow the player to continue continue authenticating, with a message.
	 * This can also be used to change kick messages for already-set flags.
	 */
	public void setKickReason(KickReason reason, String message) {
		kickReasons.put(reason, message);
	}

	/**
	 * Clears a specific kick flag if it was set. This allows fine-tuned kick reason removal without impacting other
	 * reasons (for example, a ban can be bypassed without accidentally allowing a player to join a full server).
	 *
	 * @param reason Specific flag to clear.
	 */
	public void clearKickReason(KickReason reason) {
		kickReasons.remove(reason);
	}

	/**
	 * Clears all pre-assigned kick reasons, allowing the player to continue logging in.
	 */
	public void clearAllKickReasons() {
		kickReasons.clear();
	}

	/**
	 * Returns whether the player is allowed to continue logging in.
	 */
	public boolean isAllowed() {
		return kickReasons.isEmpty();
	}

	/**
	 * Returns the kick message provided for the given kick flag, or null if not set.
	 */
	@Nullable
	public String getKickMessage(KickReason reason) {
		return kickReasons.get(reason);
	}
	
	public LoginSuccessor successor() {
		return successor;
	}
	
	public void setSuccessor(LoginSuccessor successor) {
		this.successor = successor;
	}
	
	/**
	 * Returns the final kick message which will be shown on the disconnect screen.
	 *
	 * Note: Only one message (the highest priority one) will be shown. See priority order to decide how to set your
	 * messages.
	 *
	 * @see KickReason
	 */
	public String finalKickMessage () {
		if (kickReasons.isEmpty()) return "";
		for (var reason : KickReason.values()) {
			var mess = kickReasons.get(reason);
			if (mess != null) return mess;
		}
		return "";
	}
	
	@Override
	public void handle(EventListener handler, int depth) {
		handler.onPlayerPreLogin(this);
	}
	
	private static RegisteredListener[] handlers = new RegisteredListener[0];
	@Override
	public RegisteredListener[] handlers() {
		return handlers;
	}
}